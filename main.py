import os
import asyncio
import uuid
import json
import logging
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes,
    CallbackQueryHandler, ConversationHandler
)
from aiohttp import web
import aiohttp # –î–æ–¥–∞—î–º–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ ClientSession –≤ keep_alive
from typing import Dict, Any, List

# --- –í–°–¢–ê–ù–û–í–ò–¢–ò –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü: pip install python-telegram-bot gspread oauth2client aiohttp requests ---

# --- –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –°–ï–ö–†–ï–¢–Ü–í –ó RENDER (–¢–Ü–õ–¨–ö–ò –î–õ–Ø –ë–ï–ó–ü–ï–ß–ù–ò–• –ö–õ–Æ–ß–Ü–í) ---
# –¶—ñ –∑–º—ñ–Ω–Ω—ñ –±—É–¥—É—Ç—å —á–∏—Ç–∞—Ç–∏—Å—è –∑ Render.
GSPREAD_SECRET_JSON = os.environ.get("GSPREAD_SECRET_JSON", '{"type": "service_account", "placeholder": "PASTE YOUR FULL JSON HERE"}') # –°–µ–∫—Ä–µ—Ç
INITIAL_CODE_GENERATION = os.environ.get("INITIAL_CODE_GENERATION", 'FALSE').upper() # 'TRUE' –∞–±–æ 'FALSE'

# --- –û–°–ù–û–í–ù–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –ë–û–¢–ê (–í –ö–û–î–Ü) ---
# üåü –£—Å—ñ —Ü—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–ø–µ—Ä –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–¥–∞–Ω—ñ –≤ –∫–æ–¥—ñ
TELEGRAM_BOT_TOKEN = "7710517859:AAFVhcHqe5LqAc98wLhRVrAEc8lW4XhgWuw" # –í–ê–® –¢–û–ö–ï–ù
WEBHOOK_BASE_URL = "https://school-voting-bot.onrender.com"  # –í–ê–® –û–°–ù–û–í–ù–ò–ô URL RENDER
SHEET_NAME = "School_Elections"  # –ù–ê–ó–í–ê –í–ê–®–û–á –¢–ê–ë–õ–ò–¶–Ü GOOGLE SHEETS
KEEP_ALIVE_INTERVAL = 600  # 10 —Ö–≤–∏–ª–∏–Ω –¥–ª—è Keep-Alive
# Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–¥–∞—î –∑–º—ñ–Ω–Ω—É PORT, –∞–ª–µ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 8080 —è–∫ —Ä–µ–∑–µ—Ä–≤
PORT = 8080 

# ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤, —è–∫—ñ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ –∫–æ–º–∞–Ω–¥–∏ /result
ADMIN_IDS = [
    838464083,  # –í–∞—à –ø–µ—Ä—à–∏–π ID
    6484405296, # –í–∞—à –¥—Ä—É–≥–∏–π ID
]

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–ª–∞—Å—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—ñ–≤ (–ö–ª–∞—Å–∏: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–Ω—ñ–≤)
CLASS_CONFIG = {
    "7-–ê": 28,
    "7-–ë": 30,
    "6-–ë": 25,
    "6-–ê": 27,
    "6-–í": 29
}

# –ö–∞–Ω–¥–∏–¥–∞—Ç–∏ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
CANDIDATES = {
    "Viktoriia Kochut": "–í—ñ–∫—Ç–æ—Ä—ñ—è –ö–æ—á—É—Ç",
    "Oleksandr Bilostotskyi": "–ë—ñ–ª–æ—Å—Ç–æ—Ü—å–∫–∏–π –û–ª–µ–∫—Å–∞–Ω–¥—Ä",
    "Yeva Baziuta": "–Ñ–≤–∞ –ë–∞–∑—é—Ç–∞",
    "Anna Strilchuk": "–ê–Ω–Ω–∞ –°—Ç—Ä—ñ–ª—å—á—É–∫"
}

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
(WAITING_FOR_CODE, WAITING_FOR_CONTACT, WAITING_FOR_VOTE) = range(3)

# --- –õ–û–ì–£–í–ê–ù–ù–Ø ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ú–ï–ù–ï–î–ñ–ï–† GOOGLE SHEETS (GSPREAD) ---
class SheetsManager:
    """–ö–ª–∞—Å –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ Google Sheets —á–µ—Ä–µ–∑ gspread."""
    def __init__(self, json_creds_str: str, sheet_name: str):
        self.sheet_name = sheet_name
        self.is_connected = False
        self.client = None
        self.sheet = None

        if json_creds_str and sheet_name:
            try:
                # 1. –†–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON-—Ä—è–¥–æ–∫ –Ω–∞ Python —Å–ª–æ–≤–Ω–∏–∫
                creds_dict = json.loads(json_creds_str)
                # 2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
                creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
                self.client = gspread.authorize(creds)
                
                # 3. –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é
                self.sheet = self.client.open(sheet_name)
                self.is_connected = True
                logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets.")
            except Exception as e:
                # –ó–º—ñ–Ω—é—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –±—ñ–ª—å—à–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ GSPREAD_SECRET_JSON, –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É —Ç–∞ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ '{sheet_name}'. –î–µ—Ç–∞–ª—ñ: {e}")
                self.is_connected = False

    async def get_worksheet(self, title: str):
        """–û—Ç—Ä–∏–º—É—î —Ä–æ–±–æ—á–∏–π –ª–∏—Å—Ç (–≤–∫–ª–∞–¥–∫—É) –∑–∞ –Ω–∞–∑–≤–æ—é."""
        if not self.is_connected: return None
        try:
            ws = await asyncio.to_thread(self.sheet.worksheet, title)
            return ws
        except gspread.WorksheetNotFound:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –í–∫–ª–∞–¥–∫–∞ '{title}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ '{self.sheet_name}'. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤–∏ –≤–∫–ª–∞–¥–æ–∫ ('Codes' —Ç–∞ 'Votes').")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∫–ª–∞–¥–∫–∏ '{title}': {e}")
            return None

    async def get_all_records(self, worksheet_title: str) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ —Ä–æ–±–æ—á–æ–≥–æ –ª–∏—Å—Ç–∞."""
        ws = await self.get_worksheet(worksheet_title)
        if ws is None: return []
        try:
            return await asyncio.to_thread(ws.get_all_records)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ '{worksheet_title}': {e}")
            return []

    async def update_cell(self, worksheet_title: str, row: int, col: int, value: Any):
        """–û–Ω–æ–≤–ª—é—î –æ–¥–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É."""
        ws = await self.get_worksheet(worksheet_title)
        if ws is None: return False
        try:
            await asyncio.to_thread(ws.update_cell, row, col, value)
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤ '{worksheet_title}' (R{row}, C{col}): {e}")
            return False

    async def append_row(self, worksheet_title: str, values: List[Any]):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫."""
        ws = await self.get_worksheet(worksheet_title)
        if ws is None: return False
        try:
            await asyncio.to_thread(ws.append_row, values)
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ –¥–æ '{worksheet_title}': {e}")
            return False
            
    async def get_all_values(self, worksheet_title: str) -> List[List[Any]]:
        """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–≤–∫–ª—é—á–∞—é—á–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏) –∑ —Ä–æ–±–æ—á–æ–≥–æ –ª–∏—Å—Ç–∞."""
        ws = await self.get_worksheet(worksheet_title)
        if ws is None: return []
        try:
            return await asyncio.to_thread(ws.get_all_values)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–Ω–∞—á–µ–Ω—å –∑ '{worksheet_title}': {e}")
            return []

# --- –û–î–ù–û–†–ê–ó–û–í–ê –§–£–ù–ö–¶–Ü–Ø –ì–ï–ù–ï–†–ê–¶–Ü–á –ö–û–î–Ü–í ---
async def generate_unique_codes_to_sheets(manager: SheetsManager, config: Dict[str, int]):
    """
    –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–æ–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ CLASS_CONFIG —ñ –∑–∞–ø–∏—Å—É—î —ó—Ö —É –≤–∫–ª–∞–¥–∫—É 'Codes'.
    –£–í–ê–ì–ê: –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–∞—î –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ 'Codes' –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å–æ–º.
    """
    codes_ws = await manager.get_worksheet("Codes")
    if codes_ws is None: 
        logger.error("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—ñ–≤: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∫–ª–∞–¥–∫—É 'Codes'.")
        return

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ—ó —Ç–∞–±–ª–∏—Ü—ñ (–∫—Ä—ñ–º –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤)
    try:
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—ñ–≤: –û—á–∏—â—É—é —ñ—Å–Ω—É—é—á—ñ –∑–∞–ø–∏—Å–∏...")
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥–∏ gspread —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ to_thread
        await asyncio.to_thread(codes_ws.resize, rows=1, cols=7) # –ó–º–µ–Ω—à—É—î–º–æ –¥–æ 1 —Ä—è–¥–∫–∞
        await asyncio.to_thread(codes_ws.resize, rows=1000) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–≥–∞—Ç–æ —Ä—è–¥–∫—ñ–≤ –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤
    except Exception as e:
        logger.error(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—ñ–≤: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—É —Ç–∞–±–ª–∏—Ü—é Codes: {e}")
        # –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ—Å—è, —è–∫—â–æ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        pass

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –≤–æ–Ω–∏ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ)
    await asyncio.to_thread(codes_ws.update, 'A1:G1', [['Class', 'Student_Count', 'Unique_Code', 'Is_Used', 'Telegram_ID', 'Phone_Number', 'Full_Name']])
    
    rows_to_insert = []
    
    for class_name, count in config.items():
        for _ in range(count):
            # –ì–µ–Ω–µ—Ä—É—î–º–æ 8-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤—ñ UUID
            unique_code = str(uuid.uuid4()).replace('-', '')[:8].upper()
            # [Class, Student_Count, Unique_Code, Is_Used, Telegram_ID, Phone_Number, Full_Name]
            rows_to_insert.append([class_name, count, unique_code, 'FALSE', '', '', ''])

    if rows_to_insert:
        try:
            # –ú–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            await asyncio.to_thread(codes_ws.append_rows, rows_to_insert)
            logger.info(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—ñ–≤: –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–æ {len(rows_to_insert)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ–¥—ñ–≤.")
        except Exception as e:
            logger.error(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—ñ–≤: –ü–æ–º–∏–ª–∫–∞ –º–∞—Å–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –∫–æ–¥—ñ–≤: {e}")

# --- –§–£–ù–ö–¶–Ü–á –ë–û–¢–ê (start, receive_code, receive_contact, handle_vote, show_results, cancel) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ç–æ—á–∫–∞, –ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥."""
    user = update.effective_user
    manager: SheetsManager = context.bot_data.get('sheets_manager')
    
    if not manager or not manager.is_connected:
        await update.message.reply_text("‚ùå –í–∏–±–∞—á—Ç–µ, —Å–µ—Ä–≤—ñ—Å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END

    if user.id in ADMIN_IDS:
        await update.message.reply_text("–í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é /result.")
        return ConversationHandler.END

    await update.message.reply_text(
        f"üó≥Ô∏è –í—ñ—Ç–∞—î–º–æ, {user.first_name}! –î–ª—è –ø–æ—á–∞—Ç–∫—É –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π **—É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥** –¥–æ—Å—Ç—É–ø—É.",
        reply_markup=ReplyKeyboardRemove()
    )
    return WAITING_FOR_CODE

async def receive_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–∏–π –∫–æ–¥, –ø–µ—Ä–µ–≤—ñ—Ä—è—î –π–æ–≥–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ç–∞ —Å—Ç–∞—Ç—É—Å."""
    code = update.message.text.strip().upper()
    manager: SheetsManager = context.bot_data.get('sheets_manager')

    if len(code) != 8:
        await update.message.reply_text("‚ùå –ö–æ–¥ –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ä—ñ–≤–Ω–æ –∑ 8 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return WAITING_FOR_CODE

    codes_values = await manager.get_all_values("Codes")
    if not codes_values:
        await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø—ñ –¥–æ –±–∞–∑–∏ –∫–æ–¥—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–¥
    header = codes_values[0]
    data_rows = codes_values[1:]

    context.user_data['code_row_index'] = None
    context.user_data['code_info'] = None
    
    # –Ü–Ω–¥–µ–∫—Å–∏ –∫–æ–ª–æ–Ω–æ–∫
    col_code = header.index('Unique_Code') + 1
    col_is_used = header.index('Is_Used') + 1

    for i, row in enumerate(data_rows):
        # i + 2, –æ—Å–∫—ñ–ª—å–∫–∏ —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è gspread –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 1, —ñ –º–∏ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä—è–¥–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        row_num = i + 2
        
        if row[col_code - 1] == code:
            # –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–¥
            context.user_data['code_row_index'] = row_num
            context.user_data['code_info'] = dict(zip(header, row))
            
            if row[col_is_used - 1].upper() == 'TRUE':
                await update.message.reply_text("‚ùå –¶–µ–π –∫–æ–¥ –≤–∂–µ –±—É–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è.")
                return WAITING_FOR_CODE
            
            # –ö–æ–¥ –≤–∞–ª—ñ–¥–Ω–∏–π —Ç–∞ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π. –ü—Ä–æ—Å–∏–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.
            context.user_data['unique_code'] = code
            
            keyboard = [[KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]]
            await update.message.reply_text(
                "‚úÖ –ö–æ–¥ –ø—Ä–∏–π–Ω—è—Ç–æ! –î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∞—à–æ—ó –æ—Å–æ–±–∏, –±—É–¥—å –ª–∞—Å–∫–∞, **–Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É** —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ. –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
            return WAITING_FOR_CONTACT

    # –Ø–∫—â–æ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–≤—Å—è —ñ –∫–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    return WAITING_FOR_CODE

async def receive_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É) —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏."""
    contact = update.message.contact
    user = update.effective_user
    manager: SheetsManager = context.bot_data.get('sheets_manager')
    
    if contact.user_id != user.id:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∞–º–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫—É.")
        return WAITING_FOR_CONTACT

    # 1. –û–Ω–æ–≤–ª—é—î–º–æ —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—ñ Codes
    row_num = context.user_data.get('code_row_index')
    
    if row_num:
        try:
            codes_ws = await manager.get_worksheet("Codes")
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .find() –¥–ª—è –ø–æ—à—É–∫—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
            col_is_used = await asyncio.to_thread(codes_ws.find, "Is_Used")
            col_tg_id = await asyncio.to_thread(codes_ws.find, "Telegram_ID")
            col_phone = await asyncio.to_thread(codes_ws.find, "Phone_Number")
            col_full_name = await asyncio.to_thread(codes_ws.find, "Full_Name")
            
            if all([col_is_used, col_tg_id, col_phone, col_full_name]):
                await asyncio.to_thread(codes_ws.update_cell, row_num, col_is_used.col, 'TRUE')
                await asyncio.to_thread(codes_ws.update_cell, row_num, col_tg_id.col, user.id)
                await asyncio.to_thread(codes_ws.update_cell, row_num, col_phone.col, contact.phone_number)
                await asyncio.to_thread(codes_ws.update_cell, row_num, col_full_name.col, f"{user.full_name} (@{user.username or 'N/A'})")
            else:
                logger.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–¥–Ω—É –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ —É –≤–∫–ª–∞–¥—Ü—ñ Codes.")
                raise Exception("–ü—Ä–æ–±–ª–µ–º–∞ –∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏ Sheets.")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –∫–æ–¥—É: {e}")
            await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return ConversationHandler.END

    # 2. –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
    keyboard = []
    for key, value in CANDIDATES.items():
        keyboard.append([InlineKeyboardButton(value, callback_data=f"vote_{key}")])

    await update.message.reply_text(
        "ü§ù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–¥–∞—Ç–∏ —Å–≤—ñ–π —î–¥–∏–Ω–∏–π –≥–æ–ª–æ—Å. **–ó—Ä–æ–±—ñ—Ç—å —Å–≤—ñ–π –≤–∏–±—ñ—Ä:**",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return WAITING_FOR_VOTE

async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Ç–∞ —Ñ—ñ–∫—Å—É—î –≥–æ–ª–æ—Å."""
    query = update.callback_query
    await query.answer()

    manager: SheetsManager = context.bot_data.get('sheets_manager')
    user = query.from_user
    
    # –í–∏—Ç—è–≥—É—î–º–æ –∫–ª—é—á –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Viktoriia Kochut")
    candidate_key = query.data.replace("vote_", "")
    candidate_name = CANDIDATES.get(candidate_key, "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç")
    
    code_info = context.user_data.get('code_info', {})

    # 1. –ó–∞–ø–∏—Å—É—î–º–æ –≥–æ–ª–æ—Å —É –≤–∫–ª–∞–¥–∫—É Votes
    vote_data = [
        datetime.now().isoformat(),
        code_info.get('Class', 'N/A'),
        context.user_data.get('unique_code', 'N/A'),
        user.id,
        user.username or 'N/A',
        user.full_name,
        candidate_name
    ]
    
    success = await manager.append_row("Votes", vote_data)

    if success:
        await query.edit_message_text(
            f"‚úÖ **–í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!**\n\n–í–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –∑–∞ **{candidate_name}**.",
            reply_markup=None,
            parse_mode='Markdown'
        )
    else:
        await query.edit_message_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ñ—ñ–∫—Å–∞—Ü—ñ—ó –≤–∞—à–æ–≥–æ –≥–æ–ª–æ—Å—É. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    context.user_data.clear()
    return ConversationHandler.END

async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö."""
    user = update.effective_user
    manager: SheetsManager = context.bot_data.get('sheets_manager')

    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    await update.message.reply_text("‚è≥ –ó–±–∏—Ä–∞—é —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏...")

    # 1. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≥–æ–ª–æ—Å–∏
    votes_data = await manager.get_all_records("Votes")
    if not votes_data:
        await update.message.reply_text("üìä –ù–∞—Ä–∞–∑—ñ –∂–æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å—É –Ω–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ.")
        return

    total_votes = len(votes_data)
    vote_counts: Dict[str, int] = {}

    # 2. –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –≥–æ–ª–æ—Å–∏ –∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤
    for vote in votes_data:
        candidate = vote.get('Candidate_Voted', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
        vote_counts[candidate] = vote_counts.get(candidate, 0) + 1

    # 3. –§–æ—Ä–º—É—î–º–æ –≤–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    results_text = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –í–∏–±–æ—Ä—ñ–≤ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –®–∫–æ–ª–∏**\n\n"
    results_text += f"–í—Å—å–æ–≥–æ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –≥–æ–ª–æ—Å—ñ–≤: **{total_votes}**\n\n"
    
    sorted_results = sorted(vote_counts.items(), key=lambda item: item[1], reverse=True)
    
    for candidate, count in sorted_results:
        percentage = (count / total_votes) * 100 if total_votes > 0 else 0
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –µ–º–æ–¥–∑—ñ
        blocks = int(percentage / 10)
        chart = '‚ñà' * blocks + '‚ñë' * (10 - blocks)
        
        results_text += (
            f"**{candidate}**:\n"
            f"   {count} –≥–æ–ª–æ—Å—ñ–≤ ({percentage:.2f}%)\n"
            f"   `{chart}`\n"
        )
        
    await update.message.reply_text(results_text, parse_mode='Markdown')

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î –∞–∫—Ç–∏–≤–Ω—É —Ä–æ–∑–º–æ–≤—É."""
    await update.effective_message.reply_text(
        '–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.',
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

# --- WEBHOOK –¢–ê KEEP-ALIVE ---

async def init_webhook(application: Application, url: str) -> None:
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≤–µ–±—Ö—É–∫."""
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π WEBHOOK_URL
    base_url = WEBHOOK_BASE_URL.rstrip('/')
    full_url = f"{base_url}/{TELEGRAM_BOT_TOKEN}"
    
    if full_url:
        try:
            await application.bot.set_webhook(url=full_url)
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {full_url}")
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫: {e}")

async def keep_alive_task(app: web.Application):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞ (Keep-Alive).
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î aiohttp.ClientSession –¥–ª—è –æ–±—Ö–æ–¥—É –ø–æ–º–∏–ª–∫–∏ http_client.
    """
    # URL –¥–ª—è –ø—ñ–Ω–≥-–∑–∞–ø–∏—Ç—É
    ping_url = f"{WEBHOOK_BASE_URL.rstrip('/')}/status"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ aiohttp.ClientSession –æ–¥–∏–Ω —Ä–∞–∑
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=5)) as session:
        while True:
            await asyncio.sleep(KEEP_ALIVE_INTERVAL)
            try:
                async with session.get(ping_url) as resp:
                    if resp.status == 200:
                        logger.info("‚úÖ Keep-Alive —É—Å–ø—ñ—à–Ω–∏–π.")
                    else:
                        logger.warning(f"‚ö†Ô∏è Keep-Alive –æ—Ç—Ä–∏–º–∞–≤ —Å—Ç–∞—Ç—É—Å: {resp.status}")
            except Exception as e:
                logger.error(f"‚ùå Keep-Alive –ø–æ–º–∏–ª–∫–∞: {e}")

async def status_handler(request: web.Request) -> web.Response:
    """Endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è Keep-Alive)."""
    return web.Response(text="Bot is running", status=200)

async def handle_telegram_webhook(request: web.Request) -> web.Response:
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram."""
    application = request.app['ptb_app']
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return web.Response()
    except json.JSONDecodeError:
        logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –∑ –≤–µ–±—Ö—É–∫–∞ Telegram.")
        return web.Response(status=400)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É –≤–µ–±—Ö—É–∫–∞: {e}")
        return web.Response(status=500)

async def main() -> None:
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å–µ–∫—Ä–µ—Ç—É –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if GSPREAD_SECRET_JSON.startswith('{"type": "service_account", "placeholder": '):
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –ó–º—ñ–Ω–Ω–∞ GSPREAD_SECRET_JSON –º—ñ—Å—Ç–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–º—ñ–Ω—ñ—Ç—å —ó—ó –Ω–∞ –ø–æ–≤–Ω–∏–π JSON-–∫–ª—é—á.")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Google Sheets
    sheets_manager = SheetsManager(GSPREAD_SECRET_JSON, SHEET_NAME)
    
    # üåü –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –ó–ê–ü–£–°–ö –ì–ï–ù–ï–†–ê–¶–Ü–á –ö–û–î–Ü–í (–ü–ï–†–®–ò–ô –ó–ê–ü–£–°–ö)
    if INITIAL_CODE_GENERATION == 'TRUE' and sheets_manager.is_connected:
        logger.warning(">>> INITIAL_CODE_GENERATION=TRUE. –í–∏–∫–æ–Ω—É—é –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∫–æ–¥—ñ–≤...")
        await generate_unique_codes_to_sheets(sheets_manager, CLASS_CONFIG)
        logger.warning(">>> –û–¥–Ω–æ—Ä–∞–∑–æ–≤—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∫–æ–¥—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–ò–î–ê–õ–Ü–¢–¨ –∑–º—ñ–Ω–Ω—É INITIAL_CODE_GENERATION –∑ Render, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è!")

    # --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Application ---
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.bot_data['sheets_manager'] = sheets_manager
    
    # --- –û–±—Ä–æ–±–Ω–∏–∫ —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è ---
    voting_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_FOR_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_code)],
            # –§—ñ–ª—å—Ç—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç"
            WAITING_FOR_CONTACT: [MessageHandler(filters.CONTACT, receive_contact)], 
            WAITING_FOR_VOTE: [CallbackQueryHandler(handle_vote, pattern='^vote_.*$')]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        conversation_timeout=3600 # –¢–∞–π–º-–∞—É—Ç 1 –≥–æ–¥–∏–Ω–∞
    )

    application.add_handler(voting_conv)
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(CommandHandler("result", show_results)) # –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∞
    
    # --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ ---
    web_app = web.Application()
    web_app['ptb_app'] = application
    web_app.add_routes([
        web.get('/status', status_handler),
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ {TELEGRAM_BOT_TOKEN} —É —à–ª—è—Ö—É –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        web.post(f'/{TELEGRAM_BOT_TOKEN}', handle_telegram_webhook) 
    ])
    
    # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –î–æ–¥–∞—î–º–æ keep-alive –∑–∞–¥–∞—á—É –î–û runner.setup()
    web_app.on_startup.append(lambda app: asyncio.create_task(keep_alive_task(app)))

    runner = web.AppRunner(web_app)
    await runner.setup()
    
    # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ PORT, –Ω–∞–¥–∞–Ω–∏–π Render, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 8080
    # –ü—Ä–∏–º—ñ—Ç–∫–∞: Render –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–º—ñ–Ω–Ω—É PORT, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î, –∞–ª–µ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 8080 —è–∫ —Ä–µ–∑–µ—Ä–≤
    port = int(os.environ.get("PORT", PORT))
    # –ë—ñ–Ω–¥–∏–º–æ –¥–æ –≤—Å—ñ—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤ (0.0.0.0)
    site = web.TCPSite(runner, '0.0.0.0', port) 

    # --- –ó–∞–ø—É—Å–∫ ---
    await application.initialize()
    await application.start()

    # 1. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫
    # –¢—É—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –æ–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ init_webhook, —è–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º—É—î –ø–æ–≤–Ω–∏–π URL
    await init_webhook(application, WEBHOOK_BASE_URL) 

    # 2. –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    await site.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://0.0.0.0:{port}")
    
    # –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ä–æ–±–æ—Ç–∏
    try:
        while True:
            await asyncio.sleep(3600)
    finally:
        # –ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏
        await application.stop()
        await runner.cleanup()
        logger.info("–ë–æ—Ç —Ç–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ.")

if __name__ == '__main__':
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:
        asyncio.run(main()) 

    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.")
